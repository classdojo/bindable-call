// Generated by CoffeeScript 1.6.2
(function() {
  var BindableCall, bindable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  BindableCall = (function(_super) {
    __extends(BindableCall, _super);

    /*
    */


    function BindableCall(_context, _fn, _args) {
      this._context = _context;
      this._fn = _fn;
      this._args = _args;
      this._onResult = __bind(this._onResult, this);
      this.load = __bind(this.load, this);
      BindableCall.__super__.constructor.call(this);
    }

    /*
    */


    BindableCall.prototype.load = function() {
      this.set("loading", true);
      return this._fn.apply(this, this._args.concat(this._onResult));
    };

    /*
    */


    BindableCall.prototype._onResult = function(err, data) {
      this.set("loading", false);
      this.set("error", err);
      this.set("success", !err);
      this.set("data", data);
      this.set("result", data);
      return this.set("response", {
        error: err,
        data: data
      });
    };

    return BindableCall;

  })(bindable.Object);

  module.exports = function(context, fn) {
    var args, call;

    if (context == null) {
      context = {};
    }
    args = Array.prototype.slice(2);
    if (arguments.length === 1) {
      args.shift();
      fn = context;
      context = this;
    }
    call = new BindableCall(context, fn, args);
    setTimeout(call.load, 0);
    return call;
  };

}).call(this);
