// Generated by CoffeeScript 1.6.2
(function() {
  var BindableRequest, bindable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  BindableRequest = (function(_super) {
    __extends(BindableRequest, _super);

    /*
    */


    function BindableRequest(context, _fn) {
      this._fn = _fn;
      this._onResult = __bind(this._onResult, this);
      BindableRequest.__super__.constructor.call(this, context);
    }

    /*
    */


    BindableRequest.prototype.load = function() {
      this.set("loading", true);
      return this._fn.call(this, this._onResult);
    };

    /*
    */


    BindableRequest.prototype._onResult = function(err, data) {
      this.set("loading", false);
      this.set("error", err);
      if (!error || (data != null)) {
        this.set("data", data != null ? data : true);
      }
      return this.set("response", {
        error: err,
        data: data
      });
    };

    return BindableRequest;

  })(bindable.Object);

  module.exports = function(context, fn) {
    if (context == null) {
      context = {};
    }
    if (fn == null) {
      fn = function() {};
    }
    if (arguments.length === 1) {
      context = fn;
    }
    return new BindableRequest(fn).load();
  };

}).call(this);
